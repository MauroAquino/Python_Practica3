import csv
import time
from collections import Counter

class Etl:

    @classmethod
    def load_file(cls, file_name):
        duplicate = set()
        movie_list = []
        with open(file_name, encoding="UTF-8") as csv_file:
            list_all = csv.DictReader(csv_file)
            for row in list_all:
                if row['movie_title'] in duplicate:
                    continue
                duplicate.add(row['movie_title'])
                movie_list.append(row)
        return movie_list

    @classmethod
    def color_bn(cls,list):

        #PELICULAS COLOR BN Y VACIAS
        def color_bn_traer(param):
            return len([row['movie_title'] for row in list if row['color'].strip() == param])

        return {'Color':color_bn_traer("Color"),'Blanco y Negro' : color_bn_traer("Black and White"), 'Vacio' : color_bn_traer("")}

    @classmethod
    def analysis_data(cls,param_uno,param,list):

        return sorted([[row[param_uno].replace("\xa0", "").strip(), int(row[param])] for row in list if len(row[param])>0],key=(lambda x: x[1]))

    @classmethod
    def counters(cls, param_uno, param, param_dos, list):

        return sorted([[key, value] for key, value in Counter([a[param_dos] for a in Etl.analysis_data(param_uno, param, list)]).items()], key=lambda x: x[1])

    @classmethod
    def menos_criticadas(cls,list):

        return Etl.analysis_data("movie_title","num_critic_for_reviews",list)[:10]

    @classmethod
    def mayor_duracion(cls, list):

        return Etl.analysis_data("movie_title", "duration", list)[-20:]

    @classmethod
    def mayor_dinero(cls, list):

        return Etl.analysis_data("movie_title", "gross", list)[-5:]

    @classmethod
    def menor_dinero(cls, list):

        return Etl.analysis_data("movie_title", "gross", list)[:5]

    @classmethod
    def mayor_presupuesto(cls, list):

        return Etl.analysis_data("movie_title", "budget", list)[-3:]

    @classmethod
    def menor_presupuesto(cls, list):

        return Etl.analysis_data("movie_title", "budget", list)[:3]

    @classmethod
    def mayor_produccion(cls, list):

       return Etl.counters("movie_title","title_year",1,list)[-1:]

    @classmethod
    def menor_produccion(cls, list):

       return Etl.counters("movie_title","title_year",1,list)[:1]

    @classmethod
    def pelicula_por_director(cls, list):

       return Etl.counters("director_name","director_facebook_likes",0,list)



if __name__ == "__main__":

    start_time = time.time()
    movie_list = Etl.load_file("movie_metadata.csv")


    print(Etl.color_bn(movie_list))
    print(Etl.menos_criticadas(movie_list))
    print(Etl.mayor_duracion(movie_list))
    print(Etl.mayor_dinero(movie_list))
    print(Etl.menor_dinero(movie_list))
    print(Etl.mayor_presupuesto(movie_list))
    print(Etl.menor_presupuesto(movie_list))
    print(Etl.mayor_produccion(movie_list))
    print(Etl.menor_produccion(movie_list))
    print(Etl.pelicula_por_director(movie_list))


    print('\nTiempo de Ejecucion:{0}'.format(time.time()-start_time))